// Generated by Dagger (https://dagger.dev).
package com.example.celestialapp.di;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.example.celestialapp.data.local.CelestialDatabase;
import com.example.celestialapp.data.repository.LocalDataMapper;
import com.example.celestialapp.data.repository.MyPager;
import com.example.celestialapp.data.repository.RemoteApiService;
import com.example.celestialapp.data.repository.RemoteDataMapper;
import com.example.celestialapp.data.repository.Utils;
import com.example.celestialapp.domain.repository.LocalDataRepository;
import com.example.celestialapp.domain.repository.RemoteDataRepository;
import com.example.celestialapp.domain.usecase.AddTagCelestialUseCase;
import com.example.celestialapp.domain.usecase.DeleteCrossRefDataUseCase;
import com.example.celestialapp.domain.usecase.DeleteTagsDataUseCase;
import com.example.celestialapp.domain.usecase.GetAllTagsUseCase;
import com.example.celestialapp.domain.usecase.GetDetailedDataUseCase;
import com.example.celestialapp.domain.usecase.GetFavouriteCelestialByIdUseCase;
import com.example.celestialapp.domain.usecase.GetFavouriteCelestialsByTagUseCase;
import com.example.celestialapp.domain.usecase.GetKeywordsByNasaIdUseCase;
import com.example.celestialapp.domain.usecase.GetTagsByNasaIdUseCase;
import com.example.celestialapp.domain.usecase.InsertTagDataUseCase;
import com.example.celestialapp.domain.usecase.UpdateCacheUseCase;
import com.example.celestialapp.domain.usecase.UpdateTagCelestialUseCase;
import com.example.celestialapp.presentation.activities.MainActivity;
import com.example.celestialapp.presentation.fragments.DetailsFragment;
import com.example.celestialapp.presentation.fragments.DetailsFragment_MembersInjector;
import com.example.celestialapp.presentation.fragments.DialogFactory;
import com.example.celestialapp.presentation.fragments.FavouriteDetailsFragment;
import com.example.celestialapp.presentation.fragments.FavouriteDetailsFragment_MembersInjector;
import com.example.celestialapp.presentation.fragments.FavouriteFragment;
import com.example.celestialapp.presentation.fragments.HomeFragment;
import com.example.celestialapp.presentation.fragments.KeywordsManagerFragment;
import com.example.celestialapp.presentation.fragments.KeywordsManagerFragment_MembersInjector;
import com.example.celestialapp.presentation.fragments.SearchFragment;
import com.example.celestialapp.presentation.fragments.ZoomFragment;
import com.example.celestialapp.presentation.vm.DetailedViewModel;
import com.example.celestialapp.presentation.vm.DetailedViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.celestialapp.presentation.vm.FavouriteViewModel;
import com.example.celestialapp.presentation.vm.FavouriteViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.celestialapp.presentation.vm.KeywordsManagerViewModel;
import com.example.celestialapp.presentation.vm.KeywordsManagerViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.celestialapp.presentation.vm.MainViewModel;
import com.example.celestialapp.presentation.vm.MainViewModel_HiltModules_KeyModule_ProvideFactory;
import com.example.celestialapp.presentation.vm.ZoomViewModel;
import com.example.celestialapp.presentation.vm.ZoomViewModel_HiltModules_KeyModule_ProvideFactory;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.flags.HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import dagger.internal.SetBuilder;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerMyApplication_HiltComponents_SingletonC {
  private DaggerMyApplication_HiltComponents_SingletonC() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private DataModule dataModule;

    private DialogModule dialogModule;

    private NetworkModule networkModule;

    private Builder() {
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    public Builder dataModule(DataModule dataModule) {
      this.dataModule = Preconditions.checkNotNull(dataModule);
      return this;
    }

    public Builder dialogModule(DialogModule dialogModule) {
      this.dialogModule = Preconditions.checkNotNull(dialogModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule(
        HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule) {
      Preconditions.checkNotNull(hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule);
      return this;
    }

    public Builder networkModule(NetworkModule networkModule) {
      this.networkModule = Preconditions.checkNotNull(networkModule);
      return this;
    }

    public MyApplication_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      if (dataModule == null) {
        this.dataModule = new DataModule();
      }
      if (dialogModule == null) {
        this.dialogModule = new DialogModule();
      }
      if (networkModule == null) {
        this.networkModule = new NetworkModule();
      }
      return new SingletonCImpl(applicationContextModule, dataModule, dialogModule, networkModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements MyApplication_HiltComponents.ActivityRetainedC.Builder {
    private final SingletonCImpl singletonCImpl;

    private ActivityRetainedCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public MyApplication_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonCImpl);
    }
  }

  private static final class ActivityCBuilder implements MyApplication_HiltComponents.ActivityC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public MyApplication_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonCImpl, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements MyApplication_HiltComponents.FragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public MyApplication_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements MyApplication_HiltComponents.ViewWithFragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public MyApplication_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements MyApplication_HiltComponents.ViewC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public MyApplication_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements MyApplication_HiltComponents.ViewModelC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public MyApplication_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      return new ViewModelCImpl(singletonCImpl, activityRetainedCImpl, new DomainModule(), savedStateHandle);
    }
  }

  private static final class ServiceCBuilder implements MyApplication_HiltComponents.ServiceC.Builder {
    private final SingletonCImpl singletonCImpl;

    private Service service;

    private ServiceCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public MyApplication_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonCImpl, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends MyApplication_HiltComponents.ViewWithFragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends MyApplication_HiltComponents.FragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public void injectDetailsFragment(DetailsFragment detailsFragment) {
      injectDetailsFragment2(detailsFragment);
    }

    @Override
    public void injectFavouriteDetailsFragment(FavouriteDetailsFragment favouriteDetailsFragment) {
      injectFavouriteDetailsFragment2(favouriteDetailsFragment);
    }

    @Override
    public void injectFavouriteFragment(FavouriteFragment favouriteFragment) {
    }

    @Override
    public void injectHomeFragment(HomeFragment homeFragment) {
    }

    @Override
    public void injectKeywordsManagerFragment(KeywordsManagerFragment keywordsManagerFragment) {
      injectKeywordsManagerFragment2(keywordsManagerFragment);
    }

    @Override
    public void injectSearchFragment(SearchFragment searchFragment) {
    }

    @Override
    public void injectZoomFragment(ZoomFragment zoomFragment) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }

    private DetailsFragment injectDetailsFragment2(DetailsFragment instance) {
      DetailsFragment_MembersInjector.injectDialog(instance, singletonCImpl.provideDialogFactoryProvider.get());
      return instance;
    }

    private FavouriteDetailsFragment injectFavouriteDetailsFragment2(
        FavouriteDetailsFragment instance) {
      FavouriteDetailsFragment_MembersInjector.injectDialog(instance, singletonCImpl.provideDialogFactoryProvider.get());
      return instance;
    }

    private KeywordsManagerFragment injectKeywordsManagerFragment2(
        KeywordsManagerFragment instance) {
      KeywordsManagerFragment_MembersInjector.injectDialog(instance, singletonCImpl.provideDialogFactoryProvider.get());
      return instance;
    }
  }

  private static final class ViewCImpl extends MyApplication_HiltComponents.ViewC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends MyApplication_HiltComponents.ActivityC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public void injectMainActivity(MainActivity mainActivity) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return SetBuilder.<String>newSetBuilder(5).add(DetailedViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(FavouriteViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(KeywordsManagerViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(MainViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(ZoomViewModel_HiltModules_KeyModule_ProvideFactory.provide()).build();
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }
  }

  private static final class ViewModelCImpl extends MyApplication_HiltComponents.ViewModelC {
    private final DomainModule domainModule;

    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<GetFavouriteCelestialByIdUseCase> provideGetFavouriteCelestialByIdUseCaseProvider;

    private Provider<GetDetailedDataUseCase> provideGetDetailedDataUseCaseProvider;

    private Provider<GetTagsByNasaIdUseCase> provideGetTagsByNasaIdUseCaseProvider;

    private Provider<GetKeywordsByNasaIdUseCase> provideGetKeywordsByNasaIdUseCaseProvider;

    private Provider<UpdateTagCelestialUseCase> provideUpdateTagCelestialUseCaseProvider;

    private Provider<AddTagCelestialUseCase> provideAddTagCelestialUseCaseProvider;

    private Provider<DeleteCrossRefDataUseCase> provideDeleteCrossRefDataUseCaseProvider;

    private Provider<UpdateCacheUseCase> provideUpdateCacheUseCaseProvider;

    private Provider<DetailedViewModel> detailedViewModelProvider;

    private Provider<GetAllTagsUseCase> provideGetAllTagsUseCaseProvider;

    private Provider<GetFavouriteCelestialsByTagUseCase> provideGetFavouriteCelestialsByTagUseCaseProvider;

    private Provider<FavouriteViewModel> favouriteViewModelProvider;

    private Provider<InsertTagDataUseCase> provideInsertTagDataUseCaseProvider;

    private Provider<DeleteTagsDataUseCase> provideDeleteTagsDataUseCaseProvider;

    private Provider<KeywordsManagerViewModel> keywordsManagerViewModelProvider;

    private Provider<MainViewModel> mainViewModelProvider;

    private Provider<ZoomViewModel> zoomViewModelProvider;

    private ViewModelCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, DomainModule domainModuleParam,
        SavedStateHandle savedStateHandleParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.domainModule = domainModuleParam;
      initialize(domainModuleParam, savedStateHandleParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final DomainModule domainModuleParam,
        final SavedStateHandle savedStateHandleParam) {
      this.provideGetFavouriteCelestialByIdUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<GetFavouriteCelestialByIdUseCase>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 1));
      this.provideGetDetailedDataUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<GetDetailedDataUseCase>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 2));
      this.provideGetTagsByNasaIdUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<GetTagsByNasaIdUseCase>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 3));
      this.provideGetKeywordsByNasaIdUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<GetKeywordsByNasaIdUseCase>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 4));
      this.provideUpdateTagCelestialUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<UpdateTagCelestialUseCase>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 5));
      this.provideAddTagCelestialUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<AddTagCelestialUseCase>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 6));
      this.provideDeleteCrossRefDataUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<DeleteCrossRefDataUseCase>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 7));
      this.provideUpdateCacheUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<UpdateCacheUseCase>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 8));
      this.detailedViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 0);
      this.provideGetAllTagsUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<GetAllTagsUseCase>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 10));
      this.provideGetFavouriteCelestialsByTagUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<GetFavouriteCelestialsByTagUseCase>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 11));
      this.favouriteViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 9);
      this.provideInsertTagDataUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<InsertTagDataUseCase>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 13));
      this.provideDeleteTagsDataUseCaseProvider = DoubleCheck.provider(new SwitchingProvider<DeleteTagsDataUseCase>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 14));
      this.keywordsManagerViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 12);
      this.mainViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 15);
      this.zoomViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 16);
    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return MapBuilder.<String, Provider<ViewModel>>newMapBuilder(5).put("com.example.celestialapp.presentation.vm.DetailedViewModel", ((Provider) detailedViewModelProvider)).put("com.example.celestialapp.presentation.vm.FavouriteViewModel", ((Provider) favouriteViewModelProvider)).put("com.example.celestialapp.presentation.vm.KeywordsManagerViewModel", ((Provider) keywordsManagerViewModelProvider)).put("com.example.celestialapp.presentation.vm.MainViewModel", ((Provider) mainViewModelProvider)).put("com.example.celestialapp.presentation.vm.ZoomViewModel", ((Provider) zoomViewModelProvider)).build();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          ViewModelCImpl viewModelCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.example.celestialapp.presentation.vm.DetailedViewModel 
          return (T) new DetailedViewModel(viewModelCImpl.provideGetFavouriteCelestialByIdUseCaseProvider.get(), viewModelCImpl.provideGetDetailedDataUseCaseProvider.get(), viewModelCImpl.provideGetTagsByNasaIdUseCaseProvider.get(), viewModelCImpl.provideGetKeywordsByNasaIdUseCaseProvider.get(), viewModelCImpl.provideUpdateTagCelestialUseCaseProvider.get(), viewModelCImpl.provideAddTagCelestialUseCaseProvider.get(), viewModelCImpl.provideDeleteCrossRefDataUseCaseProvider.get(), viewModelCImpl.provideUpdateCacheUseCaseProvider.get());

          case 1: // com.example.celestialapp.domain.usecase.GetFavouriteCelestialByIdUseCase 
          return (T) DomainModule_ProvideGetFavouriteCelestialByIdUseCaseFactory.provideGetFavouriteCelestialByIdUseCase(viewModelCImpl.domainModule, singletonCImpl.provideLocalDataRepositoryProvider.get(), singletonCImpl.provideLocalDataMapperProvider.get());

          case 2: // com.example.celestialapp.domain.usecase.GetDetailedDataUseCase 
          return (T) DomainModule_ProvideGetDetailedDataUseCaseFactory.provideGetDetailedDataUseCase(viewModelCImpl.domainModule, singletonCImpl.provideLocalDataRepositoryProvider.get(), singletonCImpl.provideRemoteDataRepositoryProvider.get(), singletonCImpl.provideLocalDataMapperProvider.get());

          case 3: // com.example.celestialapp.domain.usecase.GetTagsByNasaIdUseCase 
          return (T) DomainModule_ProvideGetTagsByNasaIdUseCaseFactory.provideGetTagsByNasaIdUseCase(viewModelCImpl.domainModule, singletonCImpl.provideLocalDataRepositoryProvider.get());

          case 4: // com.example.celestialapp.domain.usecase.GetKeywordsByNasaIdUseCase 
          return (T) DomainModule_ProvideGetKeywordsByNasaIdUseCaseFactory.provideGetKeywordsByNasaIdUseCase(viewModelCImpl.domainModule, singletonCImpl.provideLocalDataRepositoryProvider.get());

          case 5: // com.example.celestialapp.domain.usecase.UpdateTagCelestialUseCase 
          return (T) DomainModule_ProvideUpdateTagCelestialUseCaseFactory.provideUpdateTagCelestialUseCase(viewModelCImpl.domainModule, singletonCImpl.provideLocalDataRepositoryProvider.get());

          case 6: // com.example.celestialapp.domain.usecase.AddTagCelestialUseCase 
          return (T) DomainModule_ProvideAddTagCelestialUseCaseFactory.provideAddTagCelestialUseCase(viewModelCImpl.domainModule, ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule), singletonCImpl.provideLocalDataRepositoryProvider.get());

          case 7: // com.example.celestialapp.domain.usecase.DeleteCrossRefDataUseCase 
          return (T) DomainModule_ProvideDeleteCrossRefDataUseCaseFactory.provideDeleteCrossRefDataUseCase(viewModelCImpl.domainModule, singletonCImpl.provideLocalDataRepositoryProvider.get());

          case 8: // com.example.celestialapp.domain.usecase.UpdateCacheUseCase 
          return (T) DomainModule_ProvideUpdateCacheUseCaseFactory.provideUpdateCacheUseCase(viewModelCImpl.domainModule, singletonCImpl.provideLocalDataRepositoryProvider.get(), singletonCImpl.provideLocalDataMapperProvider.get(), singletonCImpl.provideUtilsProvider.get());

          case 9: // com.example.celestialapp.presentation.vm.FavouriteViewModel 
          return (T) new FavouriteViewModel(viewModelCImpl.provideGetAllTagsUseCaseProvider.get(), viewModelCImpl.provideGetFavouriteCelestialsByTagUseCaseProvider.get());

          case 10: // com.example.celestialapp.domain.usecase.GetAllTagsUseCase 
          return (T) DomainModule_ProvideGetAllTagsUseCaseFactory.provideGetAllTagsUseCase(viewModelCImpl.domainModule, singletonCImpl.provideLocalDataRepositoryProvider.get(), singletonCImpl.provideLocalDataMapperProvider.get());

          case 11: // com.example.celestialapp.domain.usecase.GetFavouriteCelestialsByTagUseCase 
          return (T) DomainModule_ProvideGetFavouriteCelestialsByTagUseCaseFactory.provideGetFavouriteCelestialsByTagUseCase(viewModelCImpl.domainModule, singletonCImpl.provideLocalDataRepositoryProvider.get(), singletonCImpl.provideLocalDataMapperProvider.get());

          case 12: // com.example.celestialapp.presentation.vm.KeywordsManagerViewModel 
          return (T) new KeywordsManagerViewModel(viewModelCImpl.provideGetAllTagsUseCaseProvider.get(), viewModelCImpl.provideInsertTagDataUseCaseProvider.get(), viewModelCImpl.provideDeleteTagsDataUseCaseProvider.get());

          case 13: // com.example.celestialapp.domain.usecase.InsertTagDataUseCase 
          return (T) DomainModule_ProvideInsertTagDataUseCaseFactory.provideInsertTagDataUseCase(viewModelCImpl.domainModule, ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule), singletonCImpl.provideLocalDataRepositoryProvider.get());

          case 14: // com.example.celestialapp.domain.usecase.DeleteTagsDataUseCase 
          return (T) DomainModule_ProvideDeleteTagsDataUseCaseFactory.provideDeleteTagsDataUseCase(viewModelCImpl.domainModule, singletonCImpl.provideLocalDataRepositoryProvider.get());

          case 15: // com.example.celestialapp.presentation.vm.MainViewModel 
          return (T) new MainViewModel(singletonCImpl.provideMyPagerProvider.get());

          case 16: // com.example.celestialapp.presentation.vm.ZoomViewModel 
          return (T) new ZoomViewModel(viewModelCImpl.provideGetFavouriteCelestialByIdUseCaseProvider.get());

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends MyApplication_HiltComponents.ActivityRetainedC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    @SuppressWarnings("rawtypes")
    private Provider lifecycleProvider;

    private ActivityRetainedCImpl(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.lifecycleProvider = DoubleCheck.provider(new SwitchingProvider<Object>(singletonCImpl, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.internal.managers.ActivityRetainedComponentManager.Lifecycle 
          return (T) ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends MyApplication_HiltComponents.ServiceC {
    private final SingletonCImpl singletonCImpl;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(SingletonCImpl singletonCImpl, Service serviceParam) {
      this.singletonCImpl = singletonCImpl;


    }
  }

  private static final class SingletonCImpl extends MyApplication_HiltComponents.SingletonC {
    private final ApplicationContextModule applicationContextModule;

    private final DialogModule dialogModule;

    private final DataModule dataModule;

    private final NetworkModule networkModule;

    private final SingletonCImpl singletonCImpl = this;

    private Provider<DialogFactory> provideDialogFactoryProvider;

    private Provider<CelestialDatabase> provideCelestialDatabaseProvider;

    private Provider<CoroutineDispatcher> provideCoroutineDispatcherProvider;

    private Provider<LocalDataRepository> provideLocalDataRepositoryProvider;

    private Provider<Utils> provideUtilsProvider;

    private Provider<LocalDataMapper> provideLocalDataMapperProvider;

    private Provider<RemoteApiService> provideRemoteApiServiceProvider;

    private Provider<RemoteDataRepository> provideRemoteDataRepositoryProvider;

    private Provider<RemoteDataMapper> provideRemoteDataMapperProvider;

    private Provider<MyPager> provideMyPagerProvider;

    private SingletonCImpl(ApplicationContextModule applicationContextModuleParam,
        DataModule dataModuleParam, DialogModule dialogModuleParam,
        NetworkModule networkModuleParam) {
      this.applicationContextModule = applicationContextModuleParam;
      this.dialogModule = dialogModuleParam;
      this.dataModule = dataModuleParam;
      this.networkModule = networkModuleParam;
      initialize(applicationContextModuleParam, dataModuleParam, dialogModuleParam, networkModuleParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final ApplicationContextModule applicationContextModuleParam,
        final DataModule dataModuleParam, final DialogModule dialogModuleParam,
        final NetworkModule networkModuleParam) {
      this.provideDialogFactoryProvider = DoubleCheck.provider(new SwitchingProvider<DialogFactory>(singletonCImpl, 0));
      this.provideCelestialDatabaseProvider = DoubleCheck.provider(new SwitchingProvider<CelestialDatabase>(singletonCImpl, 2));
      this.provideCoroutineDispatcherProvider = DoubleCheck.provider(new SwitchingProvider<CoroutineDispatcher>(singletonCImpl, 3));
      this.provideLocalDataRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<LocalDataRepository>(singletonCImpl, 1));
      this.provideUtilsProvider = DoubleCheck.provider(new SwitchingProvider<Utils>(singletonCImpl, 5));
      this.provideLocalDataMapperProvider = DoubleCheck.provider(new SwitchingProvider<LocalDataMapper>(singletonCImpl, 4));
      this.provideRemoteApiServiceProvider = DoubleCheck.provider(new SwitchingProvider<RemoteApiService>(singletonCImpl, 7));
      this.provideRemoteDataRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<RemoteDataRepository>(singletonCImpl, 6));
      this.provideRemoteDataMapperProvider = DoubleCheck.provider(new SwitchingProvider<RemoteDataMapper>(singletonCImpl, 9));
      this.provideMyPagerProvider = DoubleCheck.provider(new SwitchingProvider<MyPager>(singletonCImpl, 8));
    }

    @Override
    public void injectMyApplication(MyApplication myApplication) {
    }

    @Override
    public Set<Boolean> getDisableFragmentGetContextFix() {
      return Collections.<Boolean>emptySet();
    }

    @Override
    public ActivityRetainedComponentBuilder retainedComponentBuilder() {
      return new ActivityRetainedCBuilder(singletonCImpl);
    }

    @Override
    public ServiceComponentBuilder serviceComponentBuilder() {
      return new ServiceCBuilder(singletonCImpl);
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.example.celestialapp.presentation.fragments.DialogFactory 
          return (T) DialogModule_ProvideDialogFactoryFactory.provideDialogFactory(singletonCImpl.dialogModule);

          case 1: // com.example.celestialapp.domain.repository.LocalDataRepository 
          return (T) DataModule_ProvideLocalDataRepositoryFactory.provideLocalDataRepository(singletonCImpl.dataModule, ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule), singletonCImpl.provideCelestialDatabaseProvider.get(), singletonCImpl.provideCoroutineDispatcherProvider.get());

          case 2: // com.example.celestialapp.data.local.CelestialDatabase 
          return (T) DataModule_ProvideCelestialDatabaseFactory.provideCelestialDatabase(singletonCImpl.dataModule, ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          case 3: // kotlinx.coroutines.CoroutineDispatcher 
          return (T) DataModule_ProvideCoroutineDispatcherFactory.provideCoroutineDispatcher(singletonCImpl.dataModule);

          case 4: // com.example.celestialapp.data.repository.LocalDataMapper 
          return (T) DataModule_ProvideLocalDataMapperFactory.provideLocalDataMapper(singletonCImpl.dataModule, singletonCImpl.provideUtilsProvider.get());

          case 5: // com.example.celestialapp.data.repository.Utils 
          return (T) DataModule_ProvideUtilsFactory.provideUtils(singletonCImpl.dataModule, ApplicationContextModule_ProvideContextFactory.provideContext(singletonCImpl.applicationContextModule));

          case 6: // com.example.celestialapp.domain.repository.RemoteDataRepository 
          return (T) DataModule_ProvideRemoteDataRepositoryFactory.provideRemoteDataRepository(singletonCImpl.dataModule, singletonCImpl.provideRemoteApiServiceProvider.get());

          case 7: // com.example.celestialapp.data.repository.RemoteApiService 
          return (T) NetworkModule_ProvideRemoteApiServiceFactory.provideRemoteApiService(singletonCImpl.networkModule);

          case 8: // com.example.celestialapp.data.repository.MyPager 
          return (T) DataModule_ProvideMyPagerFactory.provideMyPager(singletonCImpl.dataModule, singletonCImpl.provideCoroutineDispatcherProvider.get(), singletonCImpl.provideRemoteApiServiceProvider.get(), singletonCImpl.provideRemoteDataMapperProvider.get());

          case 9: // com.example.celestialapp.data.repository.RemoteDataMapper 
          return (T) DataModule_ProvideRemoteDataMapperFactory.provideRemoteDataMapper(singletonCImpl.dataModule);

          default: throw new AssertionError(id);
        }
      }
    }
  }
}
