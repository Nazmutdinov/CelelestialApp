// Generated by Dagger (https://dagger.dev).
package com.example.celestialapp.di;

import com.example.celestialapp.data.repository.MyPager;
import com.example.celestialapp.data.repository.RemoteApiService;
import com.example.celestialapp.data.repository.RemoteDataMapper;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DataModule_ProvideMyPagerFactory implements Factory<MyPager> {
  private final DataModule module;

  private final Provider<CoroutineDispatcher> dispatcherProvider;

  private final Provider<RemoteApiService> remoteApiServiceProvider;

  private final Provider<RemoteDataMapper> remoteDataMapperProvider;

  public DataModule_ProvideMyPagerFactory(DataModule module,
      Provider<CoroutineDispatcher> dispatcherProvider,
      Provider<RemoteApiService> remoteApiServiceProvider,
      Provider<RemoteDataMapper> remoteDataMapperProvider) {
    this.module = module;
    this.dispatcherProvider = dispatcherProvider;
    this.remoteApiServiceProvider = remoteApiServiceProvider;
    this.remoteDataMapperProvider = remoteDataMapperProvider;
  }

  @Override
  public MyPager get() {
    return provideMyPager(module, dispatcherProvider.get(), remoteApiServiceProvider.get(), remoteDataMapperProvider.get());
  }

  public static DataModule_ProvideMyPagerFactory create(DataModule module,
      Provider<CoroutineDispatcher> dispatcherProvider,
      Provider<RemoteApiService> remoteApiServiceProvider,
      Provider<RemoteDataMapper> remoteDataMapperProvider) {
    return new DataModule_ProvideMyPagerFactory(module, dispatcherProvider, remoteApiServiceProvider, remoteDataMapperProvider);
  }

  public static MyPager provideMyPager(DataModule instance, CoroutineDispatcher dispatcher,
      RemoteApiService remoteApiService, RemoteDataMapper remoteDataMapper) {
    return Preconditions.checkNotNullFromProvides(instance.provideMyPager(dispatcher, remoteApiService, remoteDataMapper));
  }
}
