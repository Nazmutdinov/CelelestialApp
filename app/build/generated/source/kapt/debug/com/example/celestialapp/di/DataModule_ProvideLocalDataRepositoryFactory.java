// Generated by Dagger (https://dagger.dev).
package com.example.celestialapp.di;

import android.content.Context;
import com.example.celestialapp.data.local.CelestialDatabase;
import com.example.celestialapp.domain.repository.LocalDataRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("dagger.hilt.android.qualifiers.ApplicationContext")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DataModule_ProvideLocalDataRepositoryFactory implements Factory<LocalDataRepository> {
  private final DataModule module;

  private final Provider<Context> contextProvider;

  private final Provider<CelestialDatabase> dbProvider;

  private final Provider<CoroutineDispatcher> dispatcherProvider;

  public DataModule_ProvideLocalDataRepositoryFactory(DataModule module,
      Provider<Context> contextProvider, Provider<CelestialDatabase> dbProvider,
      Provider<CoroutineDispatcher> dispatcherProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
    this.dbProvider = dbProvider;
    this.dispatcherProvider = dispatcherProvider;
  }

  @Override
  public LocalDataRepository get() {
    return provideLocalDataRepository(module, contextProvider.get(), dbProvider.get(), dispatcherProvider.get());
  }

  public static DataModule_ProvideLocalDataRepositoryFactory create(DataModule module,
      Provider<Context> contextProvider, Provider<CelestialDatabase> dbProvider,
      Provider<CoroutineDispatcher> dispatcherProvider) {
    return new DataModule_ProvideLocalDataRepositoryFactory(module, contextProvider, dbProvider, dispatcherProvider);
  }

  public static LocalDataRepository provideLocalDataRepository(DataModule instance, Context context,
      CelestialDatabase db, CoroutineDispatcher dispatcher) {
    return Preconditions.checkNotNullFromProvides(instance.provideLocalDataRepository(context, db, dispatcher));
  }
}
