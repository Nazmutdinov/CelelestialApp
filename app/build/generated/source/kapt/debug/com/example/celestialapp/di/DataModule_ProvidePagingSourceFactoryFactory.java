// Generated by Dagger (https://dagger.dev).
package com.example.celestialapp.di;

import com.example.celestialapp.data.repository.PagingSourceFactory;
import com.example.celestialapp.data.repository.RemoteApiService;
import com.example.celestialapp.data.repository.RemoteDataMapper;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import java.util.List;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DataModule_ProvidePagingSourceFactoryFactory implements Factory<PagingSourceFactory> {
  private final DataModule module;

  private final Provider<List<String>> keywordsProvider;

  private final Provider<CoroutineDispatcher> dispatcherProvider;

  private final Provider<RemoteApiService> remoteApiServiceProvider;

  private final Provider<RemoteDataMapper> remoteDataMapperProvider;

  public DataModule_ProvidePagingSourceFactoryFactory(DataModule module,
      Provider<List<String>> keywordsProvider, Provider<CoroutineDispatcher> dispatcherProvider,
      Provider<RemoteApiService> remoteApiServiceProvider,
      Provider<RemoteDataMapper> remoteDataMapperProvider) {
    this.module = module;
    this.keywordsProvider = keywordsProvider;
    this.dispatcherProvider = dispatcherProvider;
    this.remoteApiServiceProvider = remoteApiServiceProvider;
    this.remoteDataMapperProvider = remoteDataMapperProvider;
  }

  @Override
  public PagingSourceFactory get() {
    return providePagingSourceFactory(module, keywordsProvider.get(), dispatcherProvider.get(), remoteApiServiceProvider.get(), remoteDataMapperProvider.get());
  }

  public static DataModule_ProvidePagingSourceFactoryFactory create(DataModule module,
      Provider<List<String>> keywordsProvider, Provider<CoroutineDispatcher> dispatcherProvider,
      Provider<RemoteApiService> remoteApiServiceProvider,
      Provider<RemoteDataMapper> remoteDataMapperProvider) {
    return new DataModule_ProvidePagingSourceFactoryFactory(module, keywordsProvider, dispatcherProvider, remoteApiServiceProvider, remoteDataMapperProvider);
  }

  public static PagingSourceFactory providePagingSourceFactory(DataModule instance,
      List<String> keywords, CoroutineDispatcher dispatcher, RemoteApiService remoteApiService,
      RemoteDataMapper remoteDataMapper) {
    return Preconditions.checkNotNullFromProvides(instance.providePagingSourceFactory(keywords, dispatcher, remoteApiService, remoteDataMapper));
  }
}
