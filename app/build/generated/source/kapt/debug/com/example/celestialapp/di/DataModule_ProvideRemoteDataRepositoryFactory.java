// Generated by Dagger (https://dagger.dev).
package com.example.celestialapp.di;

import com.example.celestialapp.data.repository.RemoteApiService;
import com.example.celestialapp.domain.repository.RemoteDataRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DataModule_ProvideRemoteDataRepositoryFactory implements Factory<RemoteDataRepository> {
  private final DataModule module;

  private final Provider<RemoteApiService> remoteApiServiceProvider;

  public DataModule_ProvideRemoteDataRepositoryFactory(DataModule module,
      Provider<RemoteApiService> remoteApiServiceProvider) {
    this.module = module;
    this.remoteApiServiceProvider = remoteApiServiceProvider;
  }

  @Override
  public RemoteDataRepository get() {
    return provideRemoteDataRepository(module, remoteApiServiceProvider.get());
  }

  public static DataModule_ProvideRemoteDataRepositoryFactory create(DataModule module,
      Provider<RemoteApiService> remoteApiServiceProvider) {
    return new DataModule_ProvideRemoteDataRepositoryFactory(module, remoteApiServiceProvider);
  }

  public static RemoteDataRepository provideRemoteDataRepository(DataModule instance,
      RemoteApiService remoteApiService) {
    return Preconditions.checkNotNullFromProvides(instance.provideRemoteDataRepository(remoteApiService));
  }
}
